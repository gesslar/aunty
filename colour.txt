diff --git a/DEVELOPMENT.md b/DEVELOPMENT.md
index 42962a1..92b7398 100644
--- a/DEVELOPMENT.md
+++ b/DEVELOPMENT.md
@@ -128,7 +128,7 @@ This command:
 1. Loads and compiles the theme to build the complete ThemePool
 2. Retrieves the requested token and its resolution trail
 3. Formats a tree-like visual output showing each resolution step
-4. Color-codes different token types (variables, functions, hex colors, literals)
+4. Colour-codes different token types (variables, functions, hex colours, literals)
 
 The output shows the complete dependency chain from the original expression to the final resolved value, making it easy to debug complex variable relationships.
 
@@ -180,7 +180,7 @@ Aunty Rose processes themes in phases:
 1. **Import Resolution** - Merge modular theme files using `config.imports`
 2. **Variable Decomposition** - Flatten nested object structures into dot-notation paths
 3. **Token Evaluation** - Resolve `$(variable)` references through ThemePool system
-4. **Function Application** - Execute color manipulation functions (`lighten`, `darken`, `oklch`, `oklcha`, etc.)
+4. **Function Application** - Execute colour manipulation functions (`lighten`, `darken`, `oklch`, `oklcha`, etc.)
 5. **Dependency Resolution** - Build token dependency graph and resolve in correct order
 6. **Theme Assembly** - Compose final VS Code theme JSON with proper structure
 
@@ -238,24 +238,6 @@ node ./src/cli.js build examples/simple/midnight-ocean.yaml -o ./examples/output
   --watch
 ```
 
-## Kary Pro Colors
-
-To demonstrate the flexibility of incorporating multiple sources, included
-in this repo are two syntax highlighting files from [Kary Pro
-Colors](https://marketplace.visualstudio.com/items?itemName=karyfoundation.theme-karyfoundation-themes)
-by Pouya Kary. These files *are not* released under the Unlicense, but
-rather bear their own licensing terms. Using those files, you are bound by
-Pouya's very generous licensing.
-
-These files differ from the original source in that they have been modified
-to correspond to the DSL of this theming engine.
-
-A copy of the GPL3 license is included in the `examples/advanced/import`
-directory and applies specifically to:
-
-- `examples/advanced/import/karyprocolors-dark.tmLanguage.yaml`
-- `examples/advanced/import/karyprocolors-light.tmLanguage.yaml`
-
 ## Philosophy
 
 Aunty Rose embraces **parametric design** principles:
diff --git a/README.md b/README.md
index 118598b..9856f2c 100644
--- a/README.md
+++ b/README.md
@@ -5,16 +5,15 @@
 **Transform VS Code theme development from tedious to delightful.**
 
 Stop wrestling with 800+ disconnected hex codes. Create beautiful,
-maintainable themes with semantic variables, color functions, and design
+maintainable themes with semantic variables, colour functions, and design
 systems that actually make sense.
 
 ## The Problem
 
 VS Code theme development is a nightmare:
 
-- 800+ flat color properties with zero relationships
-- Want to adjust contrast? Hunt through dozens of files for related
-  colors
+- 800+ flat colour properties with zero relationships
+- Want to adjust contrast? Hunt through dozens of files for related colours
 - Copy-paste hex codes everywhere and pray nothing breaks
 - No way to express design intent or maintain consistency
 
@@ -113,7 +112,9 @@ npx @gesslar/aunty build --nerd my-theme.yaml
 npx @gesslar/aunty resolve --token editor.background my-theme.yaml
 ```
 
-This shows you the complete resolution chain for any theme property, displaying each step of variable substitution and function evaluation with color-coded output.
+This shows you the complete resolution chain for any theme property, displaying
+each step of variable substitution and function evaluation with colour-coded
+output.
 
 ### Resolve Command Options
 
@@ -131,7 +132,7 @@ config:
   type: dark
 
 vars:
-  # Your color palette
+  # Your colour palette
   primary: "#4b8ebd"
   success: "#4ab792"
   error: "#b74a4a"
@@ -156,23 +157,23 @@ theme:
     "sideBar.background": $(std.bg)
 ```
 
-## Color Functions
+## Colour Functions
 
-Make colors that work together:
+Make colours that work together:
 
 | Function | Example | Result |
 |----------|---------|--------|
-| `lighten(color, %=0-100)` | `lighten($(bg), 25)` | 25% lighter background |
-| `darken(color, %=0-100)` | `darken($(accent), 30)` | 30% darker accent |
+| `lighten(colour, %=0-100)` | `lighten($(bg), 25)` | 25% lighter background |
+| `darken(colour, %=0-100)` | `darken($(accent), 30)` | 30% darker accent |
 | || |
-| `alpha(color, alpha=0-1)` | `alpha($(brand), 0.5)` | Set exact transparency |
-| `fade(color, alpha=0-1)` | `fade($(accent), 0.5)` | Reduce opacity by 50% |
-| `solidify(color, alpha=0-1)` | `solidify($(bg.accent), 0.3)` | Increase opacity by 30% |
+| `alpha(colour, alpha=0-1)` | `alpha($(brand), 0.5)` | Set exact transparency |
+| `fade(colour, alpha=0-1)` | `fade($(accent), 0.5)` | Reduce opacity by 50% |
+| `solidify(colour, alpha=0-1)` | `solidify($(bg.accent), 0.3)` | Increase opacity by 30% |
 | || |
-| `mix(color1, color2, %=0-100)` | `mix($(fg), $(accent), 20)` | Blend 20% accent |
-| `mix(color1, color2)` | `mix($(fg), $(accent))` | Blend 50% accent |
+| `mix(colour1, colour2, %=0-100)` | `mix($(fg), $(accent), 20)` | Blend 20% accent |
+| `mix(colour1, colour2)` | `mix($(fg), $(accent))` | Blend 50% accent |
 | || |
-| `invert(color)` | `invert($(fg))` | Perfect opposite |
+| `invert(colour)` | `invert($(fg))` | Perfect opposite |
 | || |
 | `hsv(h=0-255, s=0-255, v=0-255)` | `hsv(50, 200, 180)` | HSV colour (hue 50, saturation 200, value 180) |
 | `hsva(h=0-255, s=0-255, v=0-255, a=0-1)` | `hsva(50, 200, 180, 0.5)` | HSV with 50% opacity |
@@ -183,11 +184,11 @@ Make colors that work together:
 | `rgb(r=0-255, g=0-255, b=0-255)` | `rgb(139, 152, 255)` | RGB colour (139 red, 152 green, 255 blue) |
 | `rgba(r=0-255, g=0-255, b=0-255, a=0-1)` | `rgba(139, 152, 255, 0.5)` | RGB with 50% opacity |
 | || |
-| `oklch(l=0-1, c=0-100, h=0-360)` | `oklch(0.7, 25, 180)` | OKLCH color (70% lightness, 25 chroma, 180° hue) |
+| `oklch(l=0-1, c=0-100, h=0-360)` | `oklch(0.7, 25, 180)` | OKLCH colour (70% lightness, 25 chroma, 180° hue) |
 | `oklcha(l=0-1, c=0-100, h=0-360, a=0-1)` | `oklcha(0.5, 30, 45, 0.8)` | OKLCH with 80% opacity |
 | || |
 
-> **Note:** In all of these functions, `color` can be a raw hex (`#ff66cc`), a variable (`$(accent)`), or another color function (`rgba(255, 100, 200, 0.5)`, `darken($(bg), 20)`, `oklcha(0.7, 25, 180, 0.8)`).
+> **Note:** In all of these functions, `colour` can be a raw hex (`#ff66cc`), a variable (`$(accent)`), or another colour function (`rgba(255, 100, 200, 0.5)`, `darken($(bg), 20)`, `oklcha(0.7, 25, 180, 0.8)`).
 
 ## Variable Reference
 
@@ -250,7 +251,7 @@ extension.
 Break your themes into reusable components using the import system:
 
 ```yaml
-# colors.yaml
+# colours.yaml
 vars:
   palette:
     primary: "#4b8ebd"
@@ -266,10 +267,10 @@ config:
   type: dark
   imports:
     vars:
-      colors: "./colors.yaml"
+      colors: "./colours.yaml"
 
 vars:
-  # Use imported colors
+  # Use imported colours
   accent: $(colors.palette.primary)
 
   # Build your design system
@@ -295,7 +296,7 @@ config:
   imports:
     # Import variables (merged into your vars section)
     vars:
-      colors: "./shared/colors.yaml"
+      colors: "./shared/colours.yaml"
       # Can import multiple files
       typography: ["./shared/fonts.yaml", "./shared/sizes.yaml"]
 
@@ -303,15 +304,15 @@ config:
     global:
       base: "./shared/base-config.yaml"
 
-    # Import VS Code color definitions
+    # Import VS Code colour definitions
     colors:
-      ui: "./shared/ui-colors.yaml"
+      ui: "./shared/ui-colours.yaml"
 
     # Import syntax highlighting rules
     tokenColors:
       syntax: "./shared/syntax.yaml"
 
-    # Import semantic token colors
+    # Import semantic token colours
     semanticTokenColors:
       semantic: "./shared/semantic.yaml"
 ```
@@ -348,10 +349,10 @@ Now edit your YAML file and watch VS Code update automatically!
 
 ## Tips for Great Themes
 
-### Start with Meaning, Not Colors
+### Start with Meaning, Not Colours
 
 ```yaml
-# ❌ Don't start with random colors
+# ❌ Don't start with random colours
 vars:
   red: "#ff0000"
   blue: "#0000ff"
@@ -370,7 +371,7 @@ vars:
 ### Use Mathematical Relationships
 
 ```yaml
-# Colors that harmonize automatically
+# Colours that harmonize automatically
 vars:
   base: "#4b8ebd"
 
@@ -380,7 +381,7 @@ vars:
     complement: mix($(base), invert($(base)), 50)
     muted: mix($(base), "#808080", 30)
 
-  # OKLCH colors for perceptually uniform adjustments
+  # OKLCH colours for perceptually uniform adjustments
   oklch_palette:
     primary: oklch(0.6, 20, 220)        # Blue with controlled chroma
     accent: oklch(0.7, 25, 45)          # Warm orange complement
@@ -391,7 +392,7 @@ vars:
 ### Test with Real Code
 
 Always test your themes with actual code files to see how syntax
-highlighting looks with your color choices.
+highlighting looks with your colour choices.
 
 ## More Examples
 
@@ -438,8 +439,8 @@ npx @gesslar/aunty resolve --token problematic.variable my-theme.yaml
 
 ## License
 
-**The Unlicense** - Use this however you want! The idea of copyrighting
-color arrangements is absurd.
+**The Unlicense** - Use this however you want! The idea of copyrighting colour
+arrangements is absurd.
 
 ---
 
diff --git a/src/ResolveCommand.js b/src/ResolveCommand.js
index 50d22f9..b0b02a3 100644
--- a/src/ResolveCommand.js
+++ b/src/ResolveCommand.js
@@ -203,13 +203,13 @@ export default class ResolveCommand extends AuntyCommand {
 
   /**
    * Formats a single ThemeToken for display in the theme resolution output,
-   * applying color and style based on its type.
+   * applying colour and style based on its type.
    *
    * @param {string} value - The man, the mystrery, the value.
-   * @returns {string} The formatted and colorized representation of the token.
+   * @returns {string} The formatted and colourised representation of the token.
    *
    * Uses the token's kind property to determine formatting instead of regex matching.
-   * Provides clear visual distinction between tokens, functions, colors, and variables.
+   * Provides clear visual distinction between tokens, functions, colours, and variables.
    */
   #formatLeaf(value) {
     if(this.#hex(value)) {
diff --git a/src/cli.js b/src/cli.js
index 413942b..056046b 100755
--- a/src/cli.js
+++ b/src/cli.js
@@ -7,7 +7,7 @@
  *  - Parse CLI arguments (supports JSON5 / YAML theme entries, globs resolved externally by the shell)
  *  - Create Theme instances for compilation units
  *  - Delegate compilation to Theme.build() which internally uses Compiler.compile()
- *  - Write (or print with --dry-run) the resulting VS Code color theme JSON
+ *  - Write (or print with --dry-run) the resulting VS Code colour theme JSON
  *  - Prevent unnecessary writes by hashing previous output
  *  - (Optional) Watch all participating source + imported files and recompile on change
  *
diff --git a/src/components/Colour.js b/src/components/Colour.js
index 628c98f..5c68cef 100644
--- a/src/components/Colour.js
+++ b/src/components/Colour.js
@@ -1,6 +1,6 @@
 /**
- * @file Color manipulation utilities for theme processing.
- * Provides comprehensive color operations including lightening, darkening,
+ * @file Colour manipulation utilities for theme processing.
+ * Provides comprehensive colour operations including lightening, darkening,
  * mixing, alpha manipulation, and format conversions.
  */
 
@@ -15,23 +15,23 @@ import {
 import Util from "../Util.js"
 import AuntyError from "./AuntyError.js"
 
-// Cache for parsed colors to improve performance
-const _colorCache = new Map()
+// Cache for parsed colours to improve performance
+const _colourCache = new Map()
 
-// Cache for mixed colors to avoid recomputation
+// Cache for mixed colours to avoid recomputation
 const _mixCache = new Map()
 
 const _functionCache = new Map()
 const _conversionFunctionCache = new Map()
 
 /**
- * Parses a color string into a Color object with caching.
+ * Parses a colour string into a colour object with caching.
  *
- * @param {string} s - The color string to parse
- * @returns {object} The parsed color object
+ * @param {string} s - The colour string to parse
+ * @returns {object} The parsed colour object
  * @throws {AuntyError} If the input is null, undefined, or empty
  */
-const asColor = s => {
+const asColour = s => {
   // This is a comment explaining that 'x == null' will be true if the function
   // receives 'undefined' or 'null'. Some robot says that I need to document
   // the behaviour, despite it being IMMEDIATELY followed by the throw
@@ -55,30 +55,30 @@ const asColor = s => {
   //
   // snoochie boochies, with love, gesslar @ 2025-09-02
   if(s == null)
-    throw AuntyError.new("asColor(): received null/undefined")
+    throw AuntyError.new("asColour(): received null/undefined")
 
   const k = String(s).trim()
   if(!k)
-    throw AuntyError.new("asColor(): received empty string")
+    throw AuntyError.new("asColour(): received empty string")
 
-  let v = _colorCache.get(k)
+  let v = _colourCache.get(k)
   if(!v) {
     v = parse(k) // returns undefined if invalid
 
     if(!v)
-      throw AuntyError.new(`Unable to parse color: ${k}`)
+      throw AuntyError.new(`Unable to parse colour: ${k}`)
 
-    _colorCache.set(k, v)
+    _colourCache.set(k, v)
   }
 
   return v
 }
 
 /**
- * Generates a cache key for color mixing operations.
+ * Generates a cache key for colour mixing operations.
  *
- * @param {string} a - First color string
- * @param {string} b - Second color string
+ * @param {string} a - First colour string
+ * @param {string} b - Second colour string
  * @param {number} t - Mixing ratio (0-1)
  * @returns {string} Cache key
  */
@@ -101,15 +101,14 @@ const toUnit = r => Math.max(0, Math.min(100, r)) / 100
  * @returns {number} The clamped value
  */
 const clamp = (num, min, max) => Math.min(Math.max(num, min), max)
-const unclamped = (num, min, max) => num < min || num > max
 
 /**
- * Color manipulation utility class providing static methods for color operations.
- * Handles hex color parsing, alpha manipulation, mixing, and format conversions.
+ * Colour manipulation utility class providing static methods for colour operations.
+ * Handles hex colour parsing, alpha manipulation, mixing, and format conversions.
  */
 export default class Colour {
   /**
-   * Regular expression for matching long hex color codes with optional alpha.
+   * Regular expression for matching long hex colour codes with optional alpha.
    * Matches patterns like #ff0000 or #ff0000ff
    *
    * @type {RegExp}
@@ -117,7 +116,7 @@ export default class Colour {
   static longHex = /^(?<colour>#[a-f0-9]{6})(?<alpha>[a-f0-9]{2})?$/i
 
   /**
-   * Regular expression for matching short hex color codes with optional alpha.
+   * Regular expression for matching short hex colour codes with optional alpha.
    * Matches patterns like #f00 or #f00f
    *
    * @type {RegExp}
@@ -125,11 +124,11 @@ export default class Colour {
   static shortHex = /^(?<colour>#[a-f0-9]{3})(?<alpha>[a-f0-9]{1})?$/i
 
   /**
-   * Lightens or darkens a hex color by a specified amount.
+   * Lightens or darkens a hex colour by a specified amount.
    *
-   * @param {string} hex - The hex color code (e.g., "#ff0000" or "#f00")
+   * @param {string} hex - The hex colour code (e.g., "#ff0000" or "#f00")
    * @param {number} amount - The amount to lighten (+) or darken (-) as a percentage
-   * @returns {string} The modified hex color with preserved alpha
+   * @returns {string} The modified hex colour with preserved alpha
    */
   static lightenOrDarken(hex, amount=0) {
     const extracted = Colour.parseHexColour(hex)
@@ -149,17 +148,17 @@ export default class Colour {
   }
 
   /**
-   * Inverts a hex color by flipping its lightness value.
+   * Inverts a hex colour by flipping its lightness value.
    * Preserves hue and saturation while inverting the lightness component.
    *
-   * @param {string} hex - The hex color code to invert
-   * @returns {string} The inverted hex color with preserved alpha
+   * @param {string} hex - The hex colour code to invert
+   * @returns {string} The inverted hex colour with preserved alpha
    */
   static invert(hex) {
     const extracted = Colour.parseHexColour(hex)
-    const hslColor = hsl(extracted.colour)
-    hslColor.l = 1 - hslColor.l  // culori uses 0-1 for lightness
-    const modifiedColour = formatHex(hslColor)
+    const hslColour = hsl(extracted.colour)
+    hslColour.l = 1 - hslColour.l  // culori uses 0-1 for lightness
+    const modifiedColour = formatHex(hslColour)
 
     const result = `${modifiedColour}${extracted.alpha?.hex??""}`.toLowerCase()
 
@@ -208,11 +207,11 @@ export default class Colour {
   }
 
   /**
-   * Normalises a short hex color code to a full 6-character format.
+   * Normalises a short hex colour code to a full 6-character format.
    * Converts 3-character hex codes like "#f00" to "#ff0000".
    *
-   * @param {string} code - The short hex color code
-   * @returns {string} The normalized 6-character hex color code
+   * @param {string} code - The short hex colour code
+   * @returns {string} The normalized 6-character hex colour code
    */
   static normaliseHex(code) {
     // did some rube give us a long hex?
@@ -231,11 +230,11 @@ export default class Colour {
   }
 
   /**
-   * Parses a hex color string and extracts color and alpha components.
+   * Parses a hex colour string and extracts colour and alpha components.
    * Supports both short (#f00) and long (#ff0000) formats with optional alpha.
    *
-   * @param {string} hex - The hex color string to parse
-   * @returns {object} Object containing color and optional alpha information
+   * @param {string} hex - The hex colour string to parse
+   * @returns {object} Object containing colour and optional alpha information
    * @throws {AuntyError} If the hex value is invalid or missing
    */
   static parseHexColour(hex) {
@@ -268,12 +267,12 @@ export default class Colour {
   }
 
   /**
-   * Sets the alpha transparency of a hex color to a specific value.
+   * Sets the alpha transparency of a hex colour to a specific value.
    * Replaces any existing alpha with the new value.
    *
-   * @param {string} hex - The hex color code
+   * @param {string} hex - The hex colour code
    * @param {number} amount - The alpha value (0-1, where 0 is transparent and 1 is opaque)
-   * @returns {string} The hex color with the new alpha value
+   * @returns {string} The hex colour with the new alpha value
    */
   static setAlpha(hex, amount) {
     const work = Colour.parseHexColour(hex)
@@ -285,12 +284,12 @@ export default class Colour {
   }
 
   /**
-   * Adjusts the alpha transparency of a hex color by a relative amount.
+   * Adjusts the alpha transparency of a hex colour by a relative amount.
    * Multiplies the current alpha by (1 + amount) and clamps the result.
    *
-   * @param {string} hex - The hex color code
+   * @param {string} hex - The hex colour code
    * @param {number} amount - The relative amount to adjust alpha (-1 to make transparent, positive to increase)
-   * @returns {string} The hex color with adjusted alpha
+   * @returns {string} The hex colour with adjusted alpha
    */
   static addAlpha(hex, amount) {
     const work = Colour.parseHexColour(hex)
@@ -302,38 +301,38 @@ export default class Colour {
   }
 
   /**
-   * Removes alpha channel from a hex color, returning only the solid color.
+   * Removes alpha channel from a hex colour, returning only the solid colour.
    *
-   * @param {string} hex - The hex color code with or without alpha
-   * @returns {string} The solid hex color without alpha
+   * @param {string} hex - The hex colour code with or without alpha
+   * @returns {string} The solid hex colour without alpha
    */
   static solid(hex) {
     return Colour.parseHexColour(hex).colour
   }
 
   /**
-   * Mixes two hex colors together in a specified ratio.
-   * Blends both the colors and their alpha channels if present.
+   * Mixes two hex colours together in a specified ratio.
+   * Blends both the colours and their alpha channels if present.
    *
-   * @param {string} colorA - The first hex color
-   * @param {string} colorB - The second hex color
+   * @param {string} colourA - The first hex colour
+   * @param {string} colourB - The second hex colour
    * @param {number} ratio - The mixing ratio as percentage (0-100, where 50 is equal mix)
-   * @returns {string} The mixed hex color with blended alpha
+   * @returns {string} The mixed hex colour with blended alpha
    */
-  static mix(colorA, colorB, ratio = 50) {
+  static mix(colourA, colourB, ratio = 50) {
     const t = toUnit(ratio)
 
     // memoize by raw inputs (strings) + normalized ratio
-    const key = mixKey(colorA, colorB, t)
+    const key = mixKey(colourA, colourB, t)
     if(_mixCache.has(key))
       return _mixCache.get(key)
 
-    const c1 = asColor(colorA)
-    const c2 = asColor(colorB)
+    const c1 = asColour(colourA)
+    const c2 = asColour(colourB)
 
-    // color-space mix using culori interpolation
-    const colorSpace = (c1.mode === "oklch" || c2.mode === "oklch") ? "oklch" : "rgb"
-    const interpolateFn = interpolate([c1, c2], colorSpace)
+    // colour-space mix using culori interpolation
+    const colourSpace = (c1.mode === "oklch" || c2.mode === "oklch") ? "oklch" : "rgb"
+    const interpolateFn = interpolate([c1, c2], colourSpace)
     const mixed = interpolateFn(t)
 
     // alpha blend too
@@ -357,11 +356,11 @@ export default class Colour {
   }
 
   /**
-   * Converts color values from various formats to hex.
-   * Supports RGB, RGBA, HSL, HSLA, OKLCH, and OKLCHA color modes, and MORE!
+   * Converts colour values from various formats to hex.
+   * Supports RGB, RGBA, HSL, HSLA, OKLCH, and OKLCHA colour modes, and MORE!
    *
    * @param {string} input - The colour expression
-   * @returns {string} The resulting hex color
+   * @returns {string} The resulting hex colour
    * @throws {AuntyError} If the wrong function or value is provided
    */
   static toHex(input) {
diff --git a/src/components/Evaluator.js b/src/components/Evaluator.js
index 5c16cac..40aaeca 100644
--- a/src/components/Evaluator.js
+++ b/src/components/Evaluator.js
@@ -181,10 +181,10 @@ export default class Evaluator {
   }
 
   /**
-   * Resolve a hex color value to a ThemeToken.
+   * Resolve a hex colour value to a ThemeToken.
    *
    * @private
-   * @param {string} value - The hex color value.
+   * @param {string} value - The hex colour value.
    * @returns {ThemeToken} The resolved token.
    */
   #resolveHex(value) {
